# Metal Gear Solid 2 Codec Interface Portfolio Website

## ROLE:
You are an experienced Svelte/SvelteKit developer with 5+ years of expertise in creating interactive web experiences, complex animations, and gaming-inspired interfaces. You have deep knowledge of GSAP animation libraries, accessibility standards, and modern web performance optimization techniques. You have previously built award-winning portfolio websites that blend nostalgia with cutting-edge functionality.

## SITUATION:
You've been tasked with creating a unique portfolio website inspired by the Metal Gear Solid 2 codec/radio call interface. The portfolio needs to showcase your design skills, web development projects, and create a personal brand that stands out while being functionally effective.

The website will use the codec interface as the primary navigation and content display system, where different "frequencies" correspond to different portfolio sections (Home, About, Projects, Contact). You have a 6-week timeline to complete the project, and it must be fully responsive, accessible, and performant across devices from mobile to desktop.

Your target audience includes creative directors at gaming and tech companies who appreciate both nostalgic references and technical implementation quality. They will be evaluating your creative approach, attention to detail, and technical skills through this portfolio.

## TASK:
Create a fully functional Metal Gear Solid 2-inspired codec interface portfolio website using SvelteKit and modern web technologies. The website must include:

1. **Build the Core Codec Interface**:
   a. Create a responsive layout matching the MGS2 codec screen with character portraits, frequency display, and dialogue box
   b. Implement the hexagonal pattern background and green monochrome color scheme
   c. Develop a scanline/CRT effect overlay that enhances the retro aesthetic without hurting usability
   d. Design custom monospace fonts or implement VT323/similar fonts that match the MGS2 aesthetic

2. **Develop Interactive Frequency System**:
   a. Create a tuning mechanism that allows users to change frequencies (140.85, 141.12, etc.)
   b. Map each frequency to a specific portfolio section with unique character portraits and content
   c. Implement frequency transition animations with static/interference effects
   d. Add frequency memory storage that allows quick access to previously visited sections

3. **Implement Animation System**:
   a. Create typewriter text effect for dialogue that mimics the MGS2 text crawl speed (approximately 50ms per character)
   b. Develop character portrait transitions that fade or slide between different sections
   c. Program frequency display animations that show numbers changing during tuning
   d. Implement static/interference effects for transitions using GSAP and/or canvas elements
   e. Add subtle ambient animations (blinking indicators, slight movement in portraits) for immersion

4. **Design Responsive & Accessible Experience**:
   a. Create breakpoint adaptations that maintain the codec aesthetic across device sizes
   b. Implement keyboard navigation that allows frequency tuning without mouse interactions
   c. Add ARIA attributes and semantic HTML throughout the interface
   d. Create an optional "accessibility mode" that reduces animations and increases contrast
   e. Develop fallback navigation for users who prefer traditional controls

5. **Integrate Portfolio Content**:
   a. Design project showcase system that expands from the codec interface
   b. Create PDF resume access that maintains the theme
   c. Implement contact form that uses the codec dialogue metaphor
   d. Add interactive elements that reveal more detailed content on demand

## OBJECTIVE:
1. Create a memorable, distinctive portfolio website that demonstrates both technical expertise and creative abilities
2. Ensure the website is fully functional, responsive, and accessible despite its stylized interface
3. Achieve 90+ scores on Lighthouse performance metrics
4. Showcase at least 5 portfolio projects in an engaging, interactive format
5. Create a personal brand that appeals to both creative agencies and tech companies
6. Preserve the authentic feel of the MGS2 codec while adapting it for portfolio purposes

## KNOWLEDGE:

### Metal Gear Solid 2 Codec Interface Specifications:
1. **Layout Structure**:
   - Character portraits on left and right sides (typically 128x128px dimensions)
   - Central frequency display showing numbers in the format "140.85" with characteristic digital font
   - Text display area at bottom for dialogue
   - Green monochrome color scheme (#0f380f background, #8bac0f text and highlights)
   - Hexagonal pattern or grid background

2. **UI Elements**:
   - "PTT" (Push To Talk) indicator at top of frequency display
   - "MEMORY" section at bottom for saved frequencies
   - Signal strength bars on left side of frequency display
   - Frequency number display (e.g., "140.85", "141.12")
   - "TUNE" controls for changing frequencies
   - Dialogue text area with monospaced font

3. **Visual Effects**:
   - Scanline effect creating horizontal lines across the entire interface
   - Static/interference during transitions between frequencies
   - Slight CRT screen curvature
   - Subtle flicker effect
   - Darkened corners (vignette effect)

4. **Animation Specifications**:
   - Text appears at approximately 50ms per character in typewriter style
   - Frequency changes include a 300-500ms transition with static interference
   - Character portraits fade or slide in/out during transitions (200-300ms)
   - Subtle ambient movement in the interface (breathing effect)

### Technical Requirements:
1. **Core Technologies**:
   - SvelteKit for framework and routing
   - GSAP for complex animations
   - TailwindCSS for styling
   - Melt UI for headless component architecture
   - Web Audio API for sound effects (optional)

2. **Performance Targets**:
   - First Meaningful Paint under 1.2 seconds
   - Total Blocking Time under 200ms
   - Cumulative Layout Shift under 0.1
   - Lighthouse Performance score of 90+

3. **Accessibility Requirements**:
   - WCAG AA compliance
   - Keyboard navigable interface
   - Reduced motion option
   - Sufficient color contrast (minimum 4.5:1 for text)
   - Screen reader compatible with appropriate ARIA labels

## OUTPUT FORMAT:

### Project Structure:
```
codec-portfolio/
├── src/
│   ├── lib/
│   │   ├── components/
│   │   │   ├── Codec.svelte            # Main container component
│   │   │   ├── FrequencyDisplay.svelte # Central display component
│   │   │   ├── CharacterPortrait.svelte # Character display component
│   │   │   ├── DialogueBox.svelte      # Text display component
│   │   │   ├── ScanlineEffect.svelte   # CRT effect component
│   │   │   ├── StaticEffect.svelte     # Transition effect component
│   │   │   └── ProjectShowcase.svelte  # Expanded project display
│   │   ├── animations/
│   │   │   ├── typewriter.js           # Text animation utilities
│   │   │   ├── transitions.js          # Transition animation utilities
│   │   │   └── ambient.js              # Ambient animation utilities
│   │   ├── stores/
│   │   │   ├── frequency.js            # Current frequency state
│   │   │   ├── dialogue.js             # Dialogue content by section
│   │   │   └── settings.js             # User preferences
│   │   └── data/
│   │       ├── projects.js             # Portfolio project data
│   │       ├── frequencies.js          # Frequency mapping data
│   │       └── characters.js           # Character portrait data
│   ├── routes/
│   │   ├── +page.svelte               # Main app entry
│   │   ├── +layout.svelte             # Global layout
│   │   └── api/                       # Optional API routes
│   └── app.css                        # Global styles
├── static/
│   ├── fonts/
│   ├── images/
│   │   ├── characters/                # Character portraits
│   │   ├── projects/                  # Project screenshots
│   │   └── ui/                        # UI elements
│   └── audio/                         # Sound effects
└── package.json                       # Dependencies
```

### Component Implementation Details:
1. Complete component code for the core codec interface
2. Animation implementations with GSAP
3. Responsive design breakpoints and adaptations
4. Accessibility enhancement details

## QUALITY PARAMETERS:
1. Interface must accurately recreate the MGS2 codec aesthetic while being fully functional as a portfolio
2. All animations must run at 60fps on mid-range devices
3. Website must be fully navigable by keyboard
4. Content must remain accessible despite the stylized interface
5. Load time must not exceed 3 seconds on 4G connections
6. All interactive elements must have appropriate hover/focus states
7. Code must be well-organized and commented for maintainability
8. Responsive design must work flawlessly from 320px to 2560px widths

## ADVANCED TECHNIQUES:

1. **Enhanced Immersion**:
   - Implement codec call ringtone when first entering the site
   - Add subtle static/interference sounds during frequency changes
   - Create "incoming call" animation for initial load
   - Add "tuning" sound effect when changing frequencies
   - Implement voice modulation effect for audio descriptions (optional)

2. **Extended Portfolio Functionality**:
   - Create expandable project screens that emerge from the codec interface
   - Implement "encrypted data" sections that require special frequencies to access
   - Add Easter eggs accessible through secret frequency combinations
   - Create character-specific dialogue variations for each section

3. **Technical Optimizations**:
   - Implement dynamic import of project content based on selected frequency
   - Use Intersection Observer to pause animations when not in viewport
   - Create custom audio management system with user preferences
   - Implement subtle parallax effects in the background

4. **Accessibility Enhancements**:
   - Develop a "classic mode" toggle that simplifies the interface while preserving theming
   - Create custom focus management system for the non-standard navigation
   - Implement audio descriptions of visual elements for screen readers
   - Add haptic feedback for mobile devices during frequency changes

## IMPLEMENTATION GUIDE:

### Step 1: Project Setup
1. Initialize a new SvelteKit project
   ```bash
   npm create svelte@latest codec-portfolio
   cd codec-portfolio
   npm install
   ```

2. Install required dependencies
   ```bash
   npm install gsap tailwindcss @melt-ui/svelte
   npx svelte-add@latest tailwindcss
   npm install -D postcss autoprefixer
   ```

3. Set up basic file structure as outlined in Output Format

### Step 2: Create Core Components
1. Start with the main Codec.svelte component that will contain the entire interface
2. Implement the character portraits, frequency display, and dialogue box components
3. Create the scanline and CRT effects
4. Implement basic styling with TailwindCSS

### Step 3: Implement State Management
1. Set up Svelte stores for managing the current frequency and section
2. Create the data structure for mapping frequencies to portfolio sections
3. Implement the character data for different sections

### Step 4: Build the Animation System
1. Set up GSAP and necessary plugins
2. Implement typewriter text effect for dialogue
3. Create transition animations for frequency changes
4. Add static/interference effects
5. Implement character portrait transitions

### Step 5: Create Responsive Design
1. Implement breakpoints for different device sizes
2. Create tablet and mobile adaptations of the codec interface
3. Test and optimize for various screen dimensions

### Step 6: Add Portfolio Content
1. Implement project showcase functionality
2. Create about section with professional information
3. Add contact form or contact information
4. Include resume/CV access

### Step 7: Enhance Accessibility
1. Add ARIA attributes to all components
2. Implement keyboard navigation
3. Create reduced motion options
4. Test with screen readers and make necessary adjustments

### Step 8: Optimize Performance
1. Implement lazy loading for assets
2. Optimize animations for performance
3. Set up proper asset caching
4. Run Lighthouse audits and fix issues

### Step 9: Add Advanced Features
1. Implement sound effects
2. Add Easter eggs and special features
3. Create enhanced project display options
4. Implement additional immersive elements

### Step 10: Testing and Deployment
1. Test across multiple browsers and devices
2. Fix any cross-browser compatibility issues
3. Deploy to hosting platform of choice
4. Set up analytics to track user engagement

### Key Code Snippets:

#### Frequency Tuning System:
```javascript
// Inside FrequencyDisplay.svelte
import { createEventDispatcher } from 'svelte';
import { gsap } from 'gsap';

export let frequency = '140.85';
export let isChanging = false;

const dispatch = createEventDispatcher();

// Available frequencies for portfolio sections
const availableFrequencies = [
  '140.85', // Home
  '141.12', // About
  '140.96', // Projects
  '141.52'  // Contact
];

// Handle tuning up/down
function tune(direction) {
  if (isChanging) return;
  
  const currentIndex = availableFrequencies.indexOf(frequency);
  let newIndex;
  
  if (direction === 'up') {
    newIndex = (currentIndex + 1) % availableFrequencies.length;
  } else {
    newIndex = (currentIndex - 1 + availableFrequencies.length) % availableFrequencies.length;
  }
  
  const newFrequency = availableFrequencies[newIndex];
  dispatch('change', { frequency: newFrequency });
}
```

#### Typewriter Animation:
```javascript
// Inside DialogueBox.svelte
import { onMount } from 'svelte';
import { gsap } from 'gsap';
import { TextPlugin } from 'gsap/TextPlugin';

gsap.registerPlugin(TextPlugin);

export let text = '';
let displayText = '';

onMount(() => {
  const tl = gsap.timeline();
  
  tl.to('.dialogue-text', {
    duration: 0,
    text: ''
  }).to('.dialogue-text', {
    duration: text.length * 0.05, // 50ms per character
    text: text,
    ease: 'none'
  });
  
  return () => {
    tl.kill();
  };
});
```

#### CRT Scanline Effect:
```svelte
<!-- ScanlineEffect.svelte -->
<script>
  import { onMount } from 'svelte';
  import { gsap } from 'gsap';
  
  export let intensity = 0.3;
  
  onMount(() => {
    // Animate moving scanline
    gsap.to('.moving-scanline', {
      y: '100%',
      duration: 2,
      repeat: -1,
      ease: 'none'
    });
    
    // Add random flicker
    const flicker = gsap.timeline({repeat: -1});
    flicker.to('.crt-flicker', {
      opacity: () => 0.3 + Math.random() * 0.1,
      duration: 0.1,
      repeat: 5,
      yoyo: true
    });
  });
</script>

<div class="crt-effects">
  <!-- Static scanlines -->
  <div class="scanlines" style="opacity: {intensity};">
    {#each Array(50) as _, i}
      <div class="scanline" style="top: {i * 2}%;"></div>
    {/each}
  </div>
  
  <!-- Moving scanline -->
  <div class="moving-scanline"></div>
  
  <!-- CRT flicker -->
  <div class="crt-flicker"></div>
  
  <!-- Vignette -->
  <div class="vignette"></div>
</div>

<style>
  .crt-effects {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10;
  }
  
  .scanlines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .scanline {
    position: absolute;
    width: 100%;
    height: 1px;
    background-color: rgba(0, 0, 0, 0.5);
  }
  
  .moving-scanline {
    position: absolute;
    top: 0;
    width: 100%;
    height: 3px;
    background-color: rgba(139, 172, 15, 0.1);
  }
  
  .crt-flicker {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(139, 172, 15, 0.05);
    opacity: 0.3;
  }
  
  .vignette {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle,
      transparent 60%,
      rgba(0, 0, 0, 0.4) 100%
    );
  }
</style>
```

## IMPORTANT TIMELINES AND MILESTONES:

### Week 1: Foundation
- Complete project setup and core component structure
- Implement basic layouts and styling
- Set up state management system

### Week 2: Animation System
- Implement all core animations and transitions
- Create CRT/scanline effects
- Build frequency tuning system

### Week 3: Content Integration
- Add portfolio project content
- Implement about and contact sections
- Create character portraits and dialogue

### Week 4: Responsive Design
- Implement responsive adaptations
- Test on various devices and screen sizes
- Fix any layout issues

### Week 5: Accessibility & Performance
- Implement accessibility features
- Optimize performance
- Run and fix Lighthouse audits

### Week 6: Polish & Launch
- Add sound effects and advanced features
- Final testing across browsers
- Deploy and launch portfolio

Your life depends on creating an authentic MGS2 codec interface that serves as a functional, engaging portfolio website while maintaining performance, accessibility, and responsive design across all devices.